http://semver.org/

0.1.0-prealpha
0.1.1-prealpha
0.1.2-prealpha
0.2.0-prealpha
0.2.1-alpha
0.2.2-alpha
0.2.3-alpha
0.2.4-beta
1.0.0-rc1
1.0.1-rc2
1.0.1
1.0.2
1.0.3
1.1.0
1.1.1 ------ branch ------> 2.0.0-beta
1.1.2                       2.0.1-rc1
1.1.3                       2.0.2-rc2
1.1.7 ------ merge -------> 2.1.0-rc3
1.2.0                       2.1.0-beta
                            2.1.1-rc1
                            2.1.2
.
.
.



1.2.3 (11BCF) <- Build number, should correspond with a revision in source control
^ ^ ^
| | |
| | +--- Minor bugs, spelling mistakes, etc.
| +----- Minor features, major bug fixes, etc.
+------- Major version, UX changes, file format changes, etc.

Given a version number MAJOR.MINOR.PATCH, increment the:

MAJOR version when you make incompatible API changes,
MINOR version when you add functionality in a backwards-compatible manner, and
PATCH version when you make backwards-compatible bug fixes.
Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.


start from 0.1.0
when it's ready I branch the code in the source repo, tag 0.1.0 and create the 0.1.0 branch, the head/trunk becomes 0.2.0-snapshot or something similar
I add new features only to the trunk, but backport fixes to the branch and in time I release from it 0.1.1, 0.1.2, ...
I declare version 1.0.0 when the product is considered feature complete and doesn't have major shortcomings
from then on - everyone can decide when to increment the major version...


